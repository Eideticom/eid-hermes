#!/usr/bin/env python3

import ctypes as c
import fcntl
import os
import unittest

class HermesIoctlArgp(c.Structure):
    _fields_ = [
        ('len', c.c_uint),
        ('prog', c.c_char_p),
        ('flags', c.c_uint),
    ]

class HermesTests(unittest.TestCase):
    dev = '/dev/hermes0'
    ehpslot = 16
    ehpssze = 1024 * 1024
    ehdssze = 1024 * 1024
    HERMES_DOWNLOAD_PROG_IOCTL = 0x40184850

    def setUp(self):
        try:
            self.hermes = os.open(self.dev, os.O_RDWR)
        except FileNotFoundError:
            self.skipTest('Could not open ' + self.dev)

    def tearDown(self):
        os.close(self.hermes)

    def _genIoctlArgp(self, prog, flags=0):
        return HermesIoctlArgp(len(prog), c.c_char_p(prog), flags)

    def sendProgram(self, prog, fd=None, flags=0, cmd=HERMES_DOWNLOAD_PROG_IOCTL):
        progArgp = self._genIoctlArgp(prog, flags)
        if fd:
            ret = fcntl.ioctl(fd, cmd, progArgp)
        else:
            ret = fcntl.ioctl(self.hermes, cmd, progArgp)
        self.assertEqual(ret, 0)

class DriverTests(HermesTests):
    payloadSmall  = b'z' * 256
    payloadMedium = b'z' * 4096
    payloadLarge  = b'z' * HermesTests.ehdssze

    def _sendFillerProgram(self, **kwargs):
        self.sendProgram(b'x' * 4096, **kwargs)

    def _testWriteReadv(self, payloads, rbuffs, rsize=None, woff=0, roff=0, wflags=0, rflags=0):
        wsize = sum([len(p) for p in payloads])
        if not rsize:
            rsize = sum([len(b) for b in rbuffs])
        self._sendFillerProgram()
        ret = os.pwritev(self.hermes, payloads, woff, wflags)
        self.assertEqual(ret, wsize)
        ret = os.preadv(self.hermes, rbuffs, roff, rflags)
        self.assertEqual(ret, rsize)

    def _testWriteRead(self, payload, woff=0, roff=0, rsize=None):
        if not rsize:
            rsize = len(payload)
        rbuffs = [bytearray(rsize)]
        self._testWriteReadv([payload], rbuffs, rsize, woff, roff)

    def testSendProgram(self):
        self._sendFillerProgram()

    def testLargeProgram(self):
        prog = b'x' * self.ehpssze * 2
        with self.assertRaisesRegex(OSError, "Invalid argument"):
            self.sendProgram(prog)

    def testTooManyPrograms(self):
        fds = []
        for i in range(self.ehpslot + 1):
            fds += [open('/dev/hermes0', 'r+b', buffering=0)]
            if i < self.ehpslot:
                ret = self._sendFillerProgram(fd=fds[i])
            else:
                with self.assertRaisesRegex(OSError, "No space left on device"):
                    self._sendFillerProgram(fd=fds[i])

    def testInvalidFlags(self):
        with self.assertRaisesRegex(OSError, "Invalid argument"):
            self._sendFillerProgram(flags=1)

    def testInvalidIoctlNum(self):
        with self.assertRaisesRegex(OSError, "Invalid argument"):
            self._sendFillerProgram(cmd=0)

    def testWriteReadZero(self):
        payload = b''
        self._testWriteRead(payload)

    def testWriteReadSmall(self):
        self._testWriteRead(self.payloadSmall)

    def testWriteReadMedium(self):
        self._testWriteRead(self.payloadMedium)

    def testWriteReadLarge(self):
        self._testWriteRead(self.payloadLarge)

    def testWriteOffset(self):
        self._testWriteRead(self.payloadSmall, woff=1024)

    def testReadOffset(self):
        self._testWriteRead(self.payloadSmall, roff=1024)

    def testWriteTooLarge(self):
        payload = b'x' * self.ehdssze * 2
        with self.assertRaisesRegex(AssertionError, "1048576 != 2097152"):
            self._testWriteRead(payload)

    def testReadTooLarge(self):
        with self.assertRaisesRegex(AssertionError, "1048576 != 2097152"):
            self._testWriteRead(self.payloadSmall, rsize=2*self.ehdssze)

    def testWriteBeforeProg(self):
        with self.assertRaisesRegex(OSError, "File descriptor in bad state"):
            os.write(self.hermes, self.payloadSmall)

    def testReadBeforeProg(self):
        with self.assertRaisesRegex(OSError, "File descriptor in bad state"):
            os.read(self.hermes, 64)

    def testReadBeforeWrite(self):
        with self.assertRaisesRegex(OSError, "No data available"):
            self._sendFillerProgram()
            os.read(self.hermes, 64)

    def testWriteLargeOffset(self):
        with self.assertRaisesRegex(AssertionError, "0 != 256"):
            self._testWriteRead(self.payloadSmall, woff=self.ehdssze)

    def testReadLargeOffset(self):
        with self.assertRaisesRegex(AssertionError, "0 != 256"):
            self._testWriteRead(self.payloadSmall, roff=self.ehdssze)

    def testWriteReadv(self):
        payloads = [self.payloadSmall, self.payloadMedium]
        rbuffs = [bytearray(i) for i in [len(p) for p in payloads]]
        self._testWriteReadv(payloads, rbuffs)

    def testWriteReadvOneWriteBuffer(self):
        payloads = [self.payloadSmall]
        wlen = len(payloads[0])
        rbuffs = [bytearray(int(wlen/4)) for i in range(4)]
        self._testWriteReadv(payloads, rbuffs)

    def testWriteReadvOneReadBuffer(self):
        payloads = [self.payloadSmall, self.payloadMedium]
        wlen = sum([len(p) for p in payloads])
        rbuffs = [bytearray(wlen)]
        self._testWriteReadv(payloads, rbuffs)

    def testReadvFlagNotSupported(self):
        payloads = [self.payloadSmall]
        rbuffs = [bytearray(len(payloads[0]))]
        with self.assertRaisesRegex(OSError, "Operation not supported"):
            self._testWriteReadv(payloads, rbuffs, rflags=os.RWF_NOWAIT)

    def testWritevRWF_SYNC(self):
        payloads = [self.payloadSmall]
        rbuffs = [bytearray(len(payloads[0]))]
        self._testWriteReadv(payloads, rbuffs, wflags=os.RWF_SYNC)

    def testFsync(self):
        self._testWriteRead(self.payloadSmall)
        os.fsync(self.hermes)

    def testFsyncBeforeProg(self):
        with self.assertRaisesRegex(OSError, "File descriptor in bad state"):
            os.fsync(self.hermes)

    def testFsyncBeforeWrite(self):
        self._sendFillerProgram()
        with self.assertRaisesRegex(OSError, "File descriptor in bad state"):
            os.fsync(self.hermes)

if __name__ == '__main__':
    unittest.TestProgram(buffer=True, catchbreak=True)
